Overview: 
    In general VM's can be useful to allow a mirror between production and development states. Making sure these are the same redues the possibility that problems occur during release that never came up during development. 

Vagrant:
    A tool for building and managing VM enviroments in a single workflow. 
    Machines are provisioned on top of VMware, Virtualbox, AWS, or any other provider. 
    After that, industry-standard provisioning tools such as shell scripts, Chef, or Puppet can automatically install and configure software on the virtual machine. 

    Usefulness for Developers: 
        If you are a developer, Vagrant will isolate dependencies and their configuration within a single disposable, consistent environment, without sacrificing any of the tools you are used to working with (editors, browsers, debuggers, etc.). 
        Once you or someone else creates a single Vagrantfile, you just need to vagrant up and everything is installed and configured for you to work. 
        Other members of your team create their development environments from the same configuration, so whether you are working on Linux, Mac OS X, or Windows, all your team members are running code in the same environment, against the same dependencies, all configured the same way. Say goodbye to "works on my machine" bugs.

    Usefulness for Operators (operations or DEVOPS engineers):
        If you are an operations engineer or DevOps engineer, Vagrant gives you a disposable environment and consistent workflow for developing and testing infrastructure management scripts. 
        You can quickly test things like shell scripts, Chef cookbooks, Puppet modules, and more using local virtualization such as VirtualBox or VMware. Then, with the same configuration, you can test these scripts on remote clouds such as AWS or RackSpace with the same workflow. 
        Ditch your custom scripts to recycle EC2 instances, stop juggling SSH prompts to various machines, and start using Vagrant to bring sanity to your life.

    Vagrant Documentation: https://developer.hashicorp.com/vagrant/docs



Differences between Packer and Vagrant: 
    Packer is primarily used to create machine images, often from scratch. 
    Vagrant's use case focuses more on making machine images easier to use and manage. 
    Another way to think of it is that many of the official Vagrant base boxes are actually created using Packer. 



Big difference between the two 



Vagrant Boxes: 
    These are the package formats for Vagrant enviroments. You specify a box enviroment and operating configurations in your vagrantfile. 

Base Boxes: 
    These are a special catagory of boxes which contain the bare minimum required for Vagrant to run .
    These are extremely useful for having a clean slate starting point from which to build future development enviroments. 
    Some base boxes come with more that may be required by the provider such as guest additions for Virtualbox so that shared folders work. 

Creating a base box:
    Base boxes are provider-specific meaning that depending on if I am using VMware, AWS, etc. the process for creating a base box is different. 
    You can find provider specific base box creation instructions here under creating a base box: https://developer.hashicorp.com/vagrant/docs/boxes/base

    General requirements for base boxes that aren't provider specific: 
        Disk Space
        Memory
        Peripherals (audio, USB, etc.)
        Default user settings 
        A default "vagrant" user to SSH into the machine with. 
            This also requires using Vagrants "insecure key pair" which can be found on their website
            vagrant is a stickler for permissions so make sure to give the .ssh file 700 permissions (chmod 700 .ssh) and authenticated_keys 600 permissions (chmod 600 filepath/authenticated_keys)
            it's also good to set the root password as "vagrant"
        IMPORTANT: Password-less Sudo
        SSH Tweaks, You want to set "UseDNS" configuration to "no" in the SSH server configuration. 
        
        Windows base box config options: 
            A list of Supported windows guest operating systems is in the docs
            Base Windows configuration:
                turn off UAC
                disable complex passwords
                disable "shutdown tracker"
                disable "server manager" starting at login
            Base WinRM con

        Packaging the box is provider specific so please refer to the provider-specific documentation for creating a base box. Links to those docs are on the creating a base box page

        Testing the Box: 
            $vagrant box add --name my-box /path/to/the/new.box
            $vagrant init my-box
            $vagrant up
                for the "vagrant up" command make sure to specifiy the provider option. 

    Post-Processors: 
        These are added to the packer build specifications. This tells packer what to do with the build when it's done. Packer defaults to just creating the image but vagrant needs a tar'd file to work with. 
        there are 3 scopes to post processors, simple, detailed, and sequenced. 
        You also might want to specify "keep_input_artifact" within the post processor to keep intermediary artifacts. 


Uploading box to Vagrant cloud: 
    decent link: https://blog.ycshao.com/2017/09/16/how-to-upload-vagrant-box-to-vagrant-cloud/#:~:text=Click%20%E2%80%9CAdd%20a%20provider%E2%80%9D%2C,click%20%E2%80%9CContinue%20to%20upload%E2%80%9D.


Updating packages and kernel for Linux machines: 
    $sudo apt update && sudo apt upgrade && sudo apt dist-upgrade


Difference between apt upgrade and apt dist-upgrade: 
    Both are used for upgrading the installed packages on the system. However, apt-get command cannot install a new package or remove existing packages if required. 
    It also means you cannot upgrade the Linux kernel version with apt-get upgrade. This is because your system keeps two kernels at a time. This is due to the fact that it needs a kernel to install the new one. 
    Dist-upgrade is a superset of upgrade. apart from the upgrade function, it can also intelligently handle changes in the package dependencies. This includes removing dependency packages that are no longer necessary or resolving conflicts between packages that arose because of changes in the dependencies. It can also install new packages if required.


After creating the box:
    upload it to vagrant cloud to store and make available to others. This is how everyone at a company can get the same box to start with. 
    The cloud gives you the name and version number needed to add to your vagrant file so you can run the box. 
    You can also add the box using the "owner/box_name" to your list of boxes you have and run it that way. 
    to run a single box use vagrant up and the --provider option for non-default providers. 



VAGRANT DOCS LINK:
    https://developer.hashicorp.com/vagrant/docs